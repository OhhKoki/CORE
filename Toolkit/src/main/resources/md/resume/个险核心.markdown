#### 1、契约承保流程

新契约是指：投保人向保险人提出保险要约直至保险合同成立的全过程。包括承接新单、初审扫描、录入复核、核保和签发保险合同工作，直到将保险合同送达投保人的运作过程,具体操作流程分为以下几步：

1. 录单(建信这边是先在统一柜面系统取投保单号，再去录单系统进行录单，录完单上传核心)
2. 自动核保
3. 自动核保成功后，若不通过则去进行人工核保（若首次自动核保通过则直接去收费，建信是在两核系统人工核保）
4. 人工核保成功后则进行收费
5. 签发保单(此时会产生保单号)
6. 保单打印
7. 发单确认
8. 单证回收(保单置上签收日期)



**新契约涉及的【投保信息】**

- 
  合同信息
  - ContBL类产生 LCCont （保单表）
- 投保人信息
  - ContBL类产生LCAppnt （投保人表）
- 被保人信息
  - ContInsuredBL类产生 LCinsured （被保人表）
- 险种信息
  - ProposalBL类调用CalBL类，生成LCpol （险种表）， LCDuty （责任表）， LCBnf （受益人表），
- 保费信息
  - LCPrem （保费表）， LCGet （领取表）



#### 2、为什么需要核保?

核保又称风险选择，指保险人对投保人和被保险人的身体状况、职业、经济能力、投保动机等因素做危险程度的评估，决定是否承保及确定适当承保条件的过程和方法。

1. 有利于商业寿险公司避免市场风险；

2. 有利于商业寿险公司永续经营；

3. 有利于客户获得真正公平的待遇；

   

#### 3、保全流程是什么，涉及哪些表？

保全流程的流程如下：

1. 保全申请
2. 添加保全项目
3. 录入保全项目变更信息
4. 点击保存
5. 强制分件
6. 保全审核
7. 拉取保全批单
8. 保全收费



**涉及到了哪些表？**

lmRiskEdorItem 保全险种项目定义表
lmedorItem 保全项目定义表
lpedorApp 保全申请主表
lpedoritem 个险保全项目表
lppol 保全险种表
lpcont 保全保单表
lpget 保全领取项表
lpprem 保全保费项表
LMCheckField 保全项目校验规则表
LMEdorCal 保全项目基本算法表
lmcalmode 算法表
LMEdorZT1 退保算法表
lpedorErrorTrack 错误轨迹表
lpedorapproveTrack 审核轨迹表
lpedorEndorse 保全批单表
LPEdorNotice 通知书打印表



保全数据结构主要包含三大部分
  a.保全业务核心数据表
    记录保全操作本身的基本信息和属性，描述保全业务过程和层次，保全业务流程的基础。
  b.保全变更/备份数据表(（LC与LP表之间的互换）)
    保全过程中记录变更内容，保全生效后备份变更前数据，并更新原始基础数据。
  c.保全业务支持数据表
     c1.对保全业务过程中的相关环节提供数据支持
     c2.保全项目基本算法表 (LMEdorCal)，保全项目校验规则(LMCheckField）,保全员信息表(LDEdorUser)
        权限等级定义表(LMEdorPopedom),保全权限表（LPEdorPopedom),通知书打印表(LPEdorNotice)
        批单打印表(LPEdorEndorse),错误轨迹表(LPEdorErrorTrack),审核轨迹表(LPEdorApproveTrack)
        批改补退费明细表(应（实收/实付）) (LJSgetENndrse/LJAGetEndorse)
        应/实付表( LJSGet/LJAGet)，应/实收表(LJSPay/LJAPay)

5.客户层保全项目与保单层保全项目区别在哪里
客户层变更针对的是该客户下所有的保单,通常变更的是客户的基本信息。如：姓名、生日、身份证、性别、健康信息、地址信息等。
保单层针对的是一张保单，通常在保单条款规定的范围内进行选择。如：保额、缴费方式、领取方式、保险期间、险种变更等

6.描述保全流程以及数据流转 
  录入保单号，执行个单保全无扫描件受理的工作流，再选择需要变更的保全项目，点击添加保全项目按钮，产生了lpedorapp保全申请主表、
lpedoritem保全项目表的数据，并执行每一个保全项目的核心处理方法，点击保存后，产生lppol、lpcont、lpduty等存储变更内容的lp基础数据表，
并执行保全的规则校验，不符合规则校验的，将会插入进lpedorErrorTrack错误轨迹表，并在保全审核界面的错误日志中展示，申请确认后，
完成了个单保全无扫描件受理、个单保全申请确认、个单保全自动核保的工作流，自动核保通过后，进行强制分件，再进行个单保全审核，
产生了LPEdorApproveTrack审核轨迹表、LPEdorEndorse批单打印表，在审核确认生效后，发生lc和lp表数据的互换，
LC表存储修改后的数据，LP存储修改前的数据。

7.对于产品定义、承保、保全、理赔这类名词的理解？
   【什么是产品定义?】
   保险产品的各项信息抽象出来，转换为参数或简单SQL定义到系统中，使得频繁变化的业务内容与相对固定的业务流程
   分离，使得新的保险产品能够快速地完成IT实现、投入生产。产品定义能使新产品的推出对系统冲击最小、修改最少
   保险公司的业务基本都是围绕保险产品而展开的，因此业务核心系统也是以产品为主线的，为了能使新产品的推出对系统
   冲击最小、修改最少，就出现了产品定义。
   产品定义的优势
   通过高度参数化的设置可以大幅度地提高系统部署的合理性和有效性，显著地降低应用系统的开发和维护成本。
   产品信息的采集主要来自于条款、费率表、现金价值表等。
   【什么是承保?】
     是指保险人接收保户的投保并签发保险合同的过程，即投保人和被保险人双方通过协商，对保险合同的内容取得意见意见一致的过程。
   【什么是保全？】
     购买保险后,我们可以根据自己的需要来变更与保险公司的合同约定内容,这些变更是保险公司的契约售后服务,也即保全服务。
   【什么是理赔?】
      是指保险公司执行保险合同，执行保险义务，承担保险责任的具体体现。

8.你是如何编写测试案例的？
先开发再测试，从两个角度来编写测试按钮：1.业务角度 2.功能角度。 

9.开发的功能上线之后出现了问题，应该怎么解决？
 答:先根据线上日志找到错误点，再根据错误点确认好有哪几种发生错误的可能性(这里可以考虑多人意见)，
    然后根据几种报错可能性逐一排查,如果这几种报错可能性定位问题原因，只能根据线上报错的业务操作
    以及对应数据在自己电脑复现此问题，问题复现后，再综合考虑问题原因及解决方案。

10.新产品开发流程(可以理解为开发一款新的产品)   
   首先根据产品管理表（需求文档）查看该险种的主要信息，是主险或者附加险，能否附加其他险种，有多少中缴费方式，有多少种保险期间及
缴费期间，是否可以续保，是否可以续期、是否可以自垫、是否有红利、年金、生存金、满期金，如果没有需求文档，可以通过用户提供的文档
搜索这些信息，一般费率表（保额算保费产品会有），保额表（保费算保额产品），现金价值表（一般长险有，但万能险和投连险没有，万能险
和投连险的现价称为账户价值，在保单生效的时候，客户交多少钱，扣除手续费、保单管理费等费用后剩余的钱会进入万能险或者投连险的账户
信息），然后定义产品定义模板，一般险种信息定义在lmriskapp，lmrisk表中，之后会有责任信息，缴费信息，理赔信息，生存给付信息，账户
信息，然后对应的算法配置在lmcalmode表中,配置完产品定义模板导入开发库，然后将定义的险种的起售日期定义到系统日期之前，便于录单测试，
根据定义的险种信息跑报文进行录入核心系统保单数据，进入核心系统后，首先跑自动核保批处理，如果有规则被卡住，则会转入两核系统进行
人工核保，如果每一条规则都没有被卡住，则直接转入待签单状态，然后收费，签单，保单打印，发单确认，保单签收.

11.如何根据一份需求,开发对应的功能
   版本一
       需求首先要经过分析,了解该需求的目的是什么，大致需要修改哪些系统，需要修改的功能点是什么，确定功能点后，先写详细设计，将需要
   修改的功能点的影响体现出来，书写后续需要测试的功能点，通过反向案例，正向案例，临界点案例进行描写测试案例，开发完成后，根据开发
   规范检查代码是否规范,完成后,根据测试案例,通过不同的测试点进行测试写的代码是否有问题,是否能正确得到用户想要的结果,代码开发完成后,
   发起评审，让大家检查代码是否正确，功能点是否齐全。
   版本二
      首先要对需求了解清楚，充分理解需求，觉得有不合适的地方要及时提出，沟通交流，同时为避免频繁的需求变更，要了解清楚用户的意图，
   明确自己的职责；
      其次在需求确定的基础上，要对大概的流程有一个掌握，并明确自己需要完成的部分，同时构思出合理的开发方案，在这个过
   程要确保方案是正确的，其中如果有需求不确定的地方，要及时联络需求，有方案不明白的地方，及时向更高层的人请假，或者可以一起开个小
   会；然后就是开发对应的功能，除了一般的常规性开发，同时要考虑系统中存在的特殊情况和生产中会出现的特殊情况；
      最后就是测试需求，这时需要根据需求从不同角度进行测试，测试的角度要尽可能地多，可以从业务的角度测试，可以从用户的角色进行测
   试，可以从数据的边界性测试，可以从业务场景进行测试，同时要关注系统中存在的特殊情况和生产中会出现的特殊情况，对这些特殊情况进行
   针对性地测试。